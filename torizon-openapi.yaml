info:
  title: Torizon OTA
  version: 2.0-Beta
  description: |2+

    This API is rate limited and will return the following headers for each API call.

      - X-RateLimit-Limit - The total number of requests allowed within a time period
      - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period
      - X-RateLimit-Reset - The number of seconds until the limit is fully reset

    In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:

       - Retry-After - The number of seconds to wait until this request is allowed

openapi: 3.0.3
paths:
  /fleets:
    post:
      tags:
      - Fleets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFleet'
      summary: Create a new fleet
      description: "\nCreates a new fleet. You must specify a fleet name and a fleet type, which can be `static` or `dynamic`.\nStatic fleets are the normal way of creating fleets on the Torizon platform. Dynamic fleets have an associated\npattern matching expression, and devices that match the pattern are automatically added to the group.\n\nIf you are interested in using dynamic groups, please contact support--the expression language is not fully\ndocumented yet.\n        "
      operationId: postFleets
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictRepr'
        "201":
          description: ""
          content:
            application/json:
              schema:
                format: uuid
                type: string
    get:
      tags:
      - Fleets
      summary: Get information about all fleets in your repository
      description: "\nReturns a list of fleets along with their UUIDs.\n        "
      parameters:
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: offset
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: limit
      operationId: getFleets
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_Fleet'
  /device-data/devices/{deviceUuid}/metrics:
    get:
      tags:
      - Device Metrics
      summary: Get metrics data from a single device
      description: "\nThis endpoint will return time-bucketed data as reported by the specified device. You must specify a time interval in \nUnix Epoch milliseconds via the `from` and `to` query parameters.\n\nYou can optionally specify one or more metrics in the query parameter (e.g. `metrics=metric1&metrics=metrics2`, etc. \nOR `metrics[]=metric1,metrics2`, etc.). If you do not specify, you will get all metrics available in the repository.\n\nYou can also specify a `resolution`. This parameter defaults to 200, with a maximum permitted value of 2000, and \ndetermines the granularity of the data returned. The data returned will be separated into buckets, with each bucket \nrepresenting the mean value of the data returned during that period.\n\nFor example, suppose you have a device reporting its CPU temperature every minute. You request that metric, with a \nresolution of 24 and a time interval that is 1 day long. You will get back 24 data points, each representing a\none-hour slice of time. The value returned for each one-hour slice will be the average of the 60 reported \nmeasurements that the device sent during that hour.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      - schema:
          items:
            type: string
          type: array
        in: query
        required: false
        name: metric
      - schema:
          format: int64
          type: integer
        in: query
        required: true
        name: from
      - schema:
          format: int64
          type: integer
        in: query
        required: true
        name: to
      - schema:
          format: int32
          type: integer
        in: query
        required: false
        name: resolution
      operationId: getDevice-dataDevicesDeviceuuidMetrics
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
  /devices/packages:
    get:
      tags:
      - Devices
      summary: Get information about the installed packages for many devices
      description: "\nReturns a list of devices and the packages those devices have installed. A list of devices can be specified as\na query parameter; if no devices are specified will return information for all devices in the repository.\n        "
      parameters:
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: offset
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: limit
      - schema:
          items:
            type: string
          type: array
        in: query
        required: false
        name: deviceUuid
      - schema:
          type: string
        in: query
        required: false
        name: nameContains
      operationId: getDevicesPackages
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_DevicePackages'
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
  /devices/notes/{deviceUuid}:
    get:
      tags:
      - Devices
      summary: Get the device notes for a specific device
      description: "\nGets the device notes for a device. Device notes are shown in the web UI, and can be used to store additional\ninformation about the device.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: getDevicesNotesDeviceuuid
      responses:
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
      - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      summary: Set the device notes for a specific device
      description: "\nSets the device notes for a device. Device notes are shown in the web UI, and can be used to store additional\ninformation about the device. Accepts a string up to approximately 64kb; will be rendered as Markdown in the\nweb UI.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: putDevicesNotesDeviceuuid
      responses:
        "400":
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
  /devices/{deviceUuid}:
    get:
      tags:
      - Devices
      summary: Get detailed information about a single device
      description: "\nShows all available information about a single device. Included information:\n* Name, ID, UUID, notes (if any)\n* Time of provisioning, activation, latest update, and last connection to the repository\n* Any fleets the device is part of\n* Installed packages, if known\n* Network information (local IP address, MAC, hostname)\n* Device tags, if any\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: getDevicesDeviceuuid
      responses:
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInfoExtended'
    delete:
      tags:
      - Devices
      summary: Delete a single device
      description: "\nPermanently delete a device from your repository. Once deleted, the device will no longer be able\nto connect to the server.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: deleteDevicesDeviceuuid
      responses:
        "202":
          description: ""
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
  /fleets/{fleetId}:
    delete:
      tags:
      - Fleets
      summary: Delete a fleet
      description: "\nPermanently delete a fleet. Devices in the fleet are not deleted, but are no longer associated with the deleted fleet.\n        "
      parameters:
      - schema:
          format: uuid
          type: string
        in: path
        required: true
        name: fleetId
      operationId: deleteFleetsFleetid
      responses:
        "400":
          description: 'Invalid value for: path parameter fleetId'
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
  /devices/token:
    get:
      tags:
      - Devices
      summary: Retrieve device provisioning token
      description: Retrieves a short-lived access token that can only be used to provision device
      operationId: getDevicesToken
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionInfo'
  /packages/{packageId}:
    patch:
      tags:
      - Packages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPackage'
      summary: Edit metadata about a package
      description: "\nEdits the metadata about a package.\n\nNot all metadata can be edited. The package name and version cannot be changed, and the contents of the package\ncannot be changed. (You should upload a new package, with a new version number, if the contents of the package\nchange.) With this endpoint, you can edit custom metadata fields, package comments, external fetch URIs, and\nthe list of compatible components.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: packageId
      operationId: patchPackagesPackageid
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictRepr'
    delete:
      tags:
      - Packages
      summary: Delete a package
      description: "\nDeletes a package and its metadata from your repository. Once you delete a package, it will no longer be a\nvalid install target. Any devices that still have the deleted package installed will show as \"Package not \nauthorized by your repository\".\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: packageId
      operationId: deletePackagesPackageid
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictRepr'
  /devices/network/{deviceUuid}:
    get:
      tags:
      - Devices
      summary: Get network information for a single device
      description: Retrieves network information (local IP address, MAC, hostname) for a single device.
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: getDevicesNetworkDeviceuuid
      responses:
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkInfo'
  /lockboxes:
    get:
      tags:
      - Updates
      summary: List all existing lockboxes on the repository
      description: "\nReturns a list of lockbox names.\n\nNote that _all_ lockboxes will be returned, including lockboxes that are expired, or that do not contain\nany packages.\n        "
      operationId: getLockboxes
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
  /lockbox-details:
    get:
      tags:
      - Updates
      summary: List all existing lockboxes on the repository, and their detailed contents
      description: "\nReturns a JSON object containing all lockbox metadata. The object has the lockbox name as a key, and the\ncomplete metadata contents (same as returned by the [GET /lockboxes/{lockbox_name}](#/Updates/getLockboxesLockbox_name)\nendpoint) as a value.\n\nNote that _all_ lockboxes will be returned, including lockboxes that are expired, or that do not contain\nany packages.\n        "
      operationId: getLockbox-details
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_LockboxName_JsonSignedPayload'
  /updates:
    post:
      tags:
      - Updates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      summary: Launch an update to one or more devices or fleets
      description: "\nThis endpoint launches a software update. You can specify a list of packages to be installed, and a list of\ndevices and/or fleets that the packages should be installed on. If you specify multiple packages, it will be\ntreated as a [synchronous update](https://developer.toradex.com/torizon/torizon-platform/torizon-updates/torizon-updates-technical-overview/#synchronous-updates-540).\n\nIt is also possible to add custom metadata or a custom download URI when creating the update. This example\nsends a synchronous update containing application package `foo-1.0` and OS package `bar-1.0` to a single\ndevice, adding a custom download URI for the application package:\n\n```\n{\n  \"packageIds\": [\n    \"foo-1.0\",\n    \"bar-1.0\"\n  ],\n  \"custom\": {\n    \"foo-1.0\": {\n      \"uri\": \"https://example.com/files/foo-1.0.yaml\",\n    }\n  },\n  \"devices\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n  ]\n}\n        "
      operationId: postUpdates
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCreateResult'
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
    patch:
      tags:
      - Updates
      requestBody:
        required: false
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
      summary: Cancel a pending update for one or more devices
      description: "\nCancels any pending update for a list of devices. Note that this endpoint does not accept fleet UUIDs,\nonly device UUIDs.\n\nUpdates can only be cancelled when they are Pending. After the device has received its update instructions,\nthe update can no longer be cancelled from the server side.\n        "
      operationId: patchUpdates
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                items:
                  format: uuid
                  type: string
                type: array
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
  /fleets/{fleetId}/devices:
    post:
      tags:
      - Fleets
      requestBody:
        required: false
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
      summary: Add devices to a fleet
      description: "\nAdds devices, specified by a list of device UUIDs in the body, to a specific fleet.\n\nNote: only applicable to static fleets.\n        "
      parameters:
      - schema:
          format: uuid
          type: string
        in: path
        required: true
        name: fleetId
      operationId: postFleetsFleetidDevices
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
    delete:
      tags:
      - Fleets
      requestBody:
        required: false
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
      summary: Remove devices from a fleet
      description: "\nRemoves devices, specified by a list of device UUIDs in the body, from a specific fleet.\n\nNote: only applicable to static fleets.\n        "
      parameters:
      - schema:
          format: uuid
          type: string
        in: path
        required: true
        name: fleetId
      operationId: deleteFleetsFleetidDevices
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
    get:
      tags:
      - Fleets
      summary: Get information about the devices in a single fleet
      description: "\nReturns device information for all devices in the specified fleet. The schema for device data is the same as\nthe [GET /devices](#/Devices/getDevices) endpoint.\n        "
      parameters:
      - schema:
          format: uuid
          type: string
        in: path
        required: true
        name: fleetId
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: offset
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: limit
      operationId: getFleetsFleetidDevices
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_DeviceInfoBasic'
  /packages_external:
    get:
      tags:
      - Packages
      summary: Retrieve metadata about packages in your repository from other sources
      description: "\nThis endpoint returns the list of packages in your repository that come from external sources, like\nTorizonCore images published by Toradex. Can be filtered by package name.\n        "
      parameters:
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: offset
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: limit
      - schema:
          type: string
        in: query
        required: false
        name: idContains
      operationId: getPackages_external
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_ExternalPackage'
  /packages:
    post:
      tags:
      - Packages
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      summary: Upload a new package
      description: "\nUpload a new package to your repository. The file to be added should be in the body as an octet-stream, and\nthe content-length header must be specified. You also must supply a package name and version, and the\nhardwareId(s) the package is built for (for example, `docker-compose` for an application package).\n        "
      parameters:
      - schema:
          type: string
        in: query
        required: true
        name: name
      - schema:
          type: string
        in: query
        required: true
        name: version
      - schema:
          items:
            type: string
          type: array
        in: query
        required: false
        name: hardwareId
      - schema:
          type: string
        in: query
        required: true
        name: targetFormat
      - schema:
          format: int32
          type: integer
        in: header
        required: true
        name: Content-Length
      operationId: postPackages
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictRepr'
    get:
      tags:
      - Packages
      summary: Retrieve metadata about packages in your repository
      description: "\nReturns a list of user-added packages in your repository. Does not include packages from other source, such\nas official TorizonCore images published by Toradex.\n\nMay be filtered using the `idContains` query parameter.\n        "
      parameters:
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: offset
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: limit
      - schema:
          type: string
        in: query
        required: false
        name: idContains
      operationId: getPackages
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_Package'
  /lockboxes/{lockbox_name}:
    post:
      tags:
      - Updates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLockboxRequest'
      summary: Define a new lockbox, or update an existing one
      description: "\nSee the [secure offline updates](https://developer.toradex.com/torizon/torizon-platform/torizon-updates/how-to-use-secure-offline-updates-with-torizoncore/)\ndocumentation for background on this feature.\n\nThis endpoint will create a new lockbox with the specified name, or update the contents of a previously\ndefined lockbox, if one with the specified name already exists.\n\nThe schema of the request body is similar to the [POST /updates](#/Updates/postUpdates) endpoint, with\nthe principal difference that offline updates are not assigned to specific devices or fleets. Instead,\nlockboxes define which update packages are _valid_ for install via an offline update.\n\nIt is still possible to add custom metadata when generating a lockbox, but custom URIs will be ignored\nduring an offline update, as the device will get its files directly from the lockbox rather than fetching\nover the network.\n\nThis endpoint can also be used to effectively revoke an existing lockbox. You can revoke a lockbox by\nupdating it so that it does not contain any packages.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: lockbox_name
      operationId: postLockboxesLockbox_name
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
    get:
      tags:
      - Updates
      summary: Get the raw Uptane metadata for a lockbox
      description: "\nUptane metadata defines what packages are included in a lockbox. It is signed with a key specific to the\noffline updates role, and lists the valid packages (including their hashes) for a particular lockbox.\n\nThis endpoint returns the full Uptane metadata for a given lockbox.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: lockbox_name
      - schema:
          format: int32
          type: integer
        in: query
        required: false
        name: version
      operationId: getLockboxesLockbox_name
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSignedPayload'
  /devices/uptane/{deviceUuid}/assignment:
    get:
      tags:
      - Devices
      summary: Show detailed information about the currently-assigned update for a single device
      description: "\nReturns the device's current update assignment, if any.\n\nUpdate assignments are an Uptane concept. The assignment is what the device will be instructed to install,\nthe next time it checks for an update. An update assignment does not necessarily mean the device will install\nan update. If, for example, the device reports that it already has all of the assigned software components\ninstalled, it will take no further action.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: getDevicesUptaneDeviceuuidAssignment
      responses:
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/QueueResponse'
                type: array
  /devices:
    post:
      tags:
      - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceCreateReq'
      summary: Manually create a new device
      description: "\nCreates a new device in your repository, returning the device credentials as a zipfile. This should not normally\nbe used; the usual way to add a device is for the device itself to call this endpoint, using a short-lived\nprovisioning token (for example, as retrieved from the [GET /devices/token](#/Devices/getDevicesToken) endpoint).\n\nYou can use this endpoint to create devices in bulk, but you will then have to manually provision the individual\ncredentials onto each device.\n        "
      operationId: postDevices
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictRepr'
    get:
      tags:
      - Devices
      summary: Query device information
      description: "\nRetrieves a list of devices in your repository. Can be filtered by device name, or return a list of\nspecific devices by giving the device UUIDs to return as query parameters.\n        "
      parameters:
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: offset
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: limit
      - schema:
          items:
            type: string
          type: array
        in: query
        required: false
        name: deviceUuid
      - schema:
          type: string
        in: query
        required: false
        name: nameContains
      - schema:
          $ref: '#/components/schemas/DeviceSort'
        in: query
        required: false
        name: sortBy
      - schema:
          $ref: '#/components/schemas/DeviceSortDirection'
        in: query
        required: false
        name: sortDirection
      operationId: getDevices
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_DeviceInfoBasic'
  /devices/packages/{deviceUuid}:
    get:
      tags:
      - Devices
      summary: Get information about the installed packages for a single device
      description: Returns a list of the packages installed on the device.
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: getDevicesPackagesDeviceuuid
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePackages'
  /devices/name/{deviceUuid}:
    get:
      tags:
      - Devices
      summary: Get the display name of a single device
      description: "\nGets the display name of a device. The displayed name of the device is only a server-side concept; the device\nis not aware of its display name.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: getDevicesNameDeviceuuid
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
      - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      summary: Set the display name of a single device
      description: "\nSets the display name of a device. The displayed name of the device is only a server-side concept; the device\nis not aware of its display name.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: putDevicesNameDeviceuuid
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
  /device-data/fleets/{fleetId}/metrics:
    get:
      tags:
      - Device Metrics
      summary: Get aggregated metrics data from a fleet of devices
      description: "\nThis endpoint will return aggregated time-bucketed data as reported by the devices in the specified fleet. You must \nspecify a time interval in Unix Epoch milliseconds via the `from` and `to` query parameters. \n\nYou can also specify a `resolution`. This parameter defaults to 200, with a maximum permitted value of 2000, and \ndetermines the granularity of the data returned. The data returned will be separated into buckets, with each bucket \nrepresenting the aggregated data from the period. For example, if you specify a one day long time interval with a\nresolution of 24, you will get 24 buckets, each representing a one hour slice of the day. If you request a resolution \nof 48, your buckets will be 30 minutes long.\n\nYou also must specify one or more metrics as query parameters (e.g. `metrics=metric1&metrics=metrics2`, etc. OR \n`metrics[]=metric1,metrics2`, etc.). For each metric you specify, you will get back four different series of datapoints: \n\n* `{metric}-count` reports how many devices in the fleet actually reported data during this time interval.\n* `{metric}-avg` reports the average value of all reported values for the metric in the period. Note that the average \nis over the number of devices that reported data: devices that didn't report the metric during the interval will not\nbe reflected in this datapoint.\n* `{metric}-max` gives the highest value reported by a device in the specified interval\n* `{metric}-min` gives the lowest value reported by a device in the specified interval\n        "
      parameters:
      - schema:
          format: uuid
          type: string
        in: path
        required: true
        name: fleetId
      - schema:
          items:
            type: string
          type: array
        in: query
        required: false
        name: metric
      - schema:
          format: int64
          type: integer
        in: query
        required: true
        name: from
      - schema:
          format: int64
          type: integer
        in: query
        required: true
        name: to
      - schema:
          format: int32
          type: integer
        in: query
        required: false
        name: resolution
      operationId: getDevice-dataFleetsFleetidMetrics
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
  /device-data/metric-names:
    get:
      tags:
      - Device Metrics
      summary: Get the list of metrics available in your repository
      description: "\nLists the metrics available in your repository.\n\nIn the default TorizonCore configuration, devices will report certain default metrics. You can also\nadd your own metrics, as described in the [TorizonCore documentation](https://developer.toradex.com/torizon/torizon-platform/device-monitoring-in-torizoncore/#customizing-device-metrics-for-torizon-platform).\nCalling this endpoint will give you the list of valid metric names for your repository; generally this\nwill include the default set plus any that you have defined yourself.\n\nYou can optionally specify a time interval in Unix Epoch milliseconds via the `from` and `to` query parameters.\nThis will return the list of metrics reported by devices in your repository during that specific interval.\n        "
      parameters:
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: from
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: to
      operationId: getDevice-dataMetric-names
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstreamEndpointErrorRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_String'
        "416":
          description: Range not Satisfiable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableRepr'
  /devices/uptane/{deviceUuid}/components:
    get:
      tags:
      - Devices
      summary: Get a list of the software components reported by a single device
      description: "\nReturns a list of the device components.\n\nComponents are an Uptane concept. In the Uptane standard, they are normally referred to as \"ECUs\", and\nrepresent individual discrete hardware modules in a vehicle. In TorizonCore, we use this concept to allow\nupdates to be sent independently to different software components of the system.\n\nIn particular, TorizonCore devices will normally have at least two components: one for the base OS, and\none for the application software.\n\nComponents have an ID (assumed to be the component's serial number in the automotive case) and a hardwareID\n(an indicator of the make or model of the component, for determining firmware/package compatibility). In\nTorizonCore, we give the application component the hardwareID \"docker-compose\", and the base OS component a\nhardwareID corresponding to the SoM's model (e.g. \"apalis-imx8\").\n\nThis endpoint returns a list of the components registered on the device, and the current software image\ninstalled on each one, if known.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: deviceUuid
      operationId: getDevicesUptaneDeviceuuidComponents
      responses:
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EcuInfoResponse'
                type: array
  /packages_external/info:
    get:
      tags:
      - Packages
      summary: Fetch information about external package sources
      description: "\nThis endpoint fetches information about external package sources authorized in your repository. External\npackage sources are how you can safely include packages from other sources in your repository. For example,\nTorizonCore OS images and bootloader binaries published by Toradex are published as an external package\nsource, and trusted by your repository by default.\n        "
      operationId: getPackages_externalInfo
      responses:
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map_DelegatedRoleName_DelegationInfo'
  /devices/network:
    get:
      tags:
      - Devices
      summary: Get network information for many devices
      description: "\nRetrieves network information (local IP address, MAC, hostname) for multiple devices. A list of devices can be specified\nas a query parameter; if no devices are specified will return information for all devices in the repository.\n        "
      parameters:
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: offset
      - schema:
          format: int64
          type: integer
        in: query
        required: false
        name: limit
      - schema:
          items:
            type: string
          type: array
        in: query
        required: false
        name: deviceUuid
      operationId: getDevicesNetwork
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResult_NetworkInfo'
  /packages_external/refresh/{source_file_name}:
    get:
      tags:
      - Packages
      summary: Refresh metadata from an external package source
      description: "\nThis endpoint refreshes the list of packages in your repository that come from the specified external source.\nFor example \"tdx-nightly.json\" is the external source for all Toradex-published TorizonCore nightly builds.\n\nExternal package sources can expire periodically, with the expiration date set by the external publisher. This\nhelps ensure that package lists remain fresh and up to date. Your devices will not install packages from an\nexpired source. Calling this endpoint will attempt to fetch the latest info from the external publisher.\n        "
      parameters:
      - schema:
          type: string
        in: path
        required: true
        name: source_file_name
      operationId: getPackages_externalRefreshSource_file_name
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestRepr'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundRepr'
        "200":
          description: ""
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictRepr'
components:
  schemas:
    Tuple2_DeviceTagId_DeviceTagValue:
      properties:
        _2:
          type: string
        _1:
          type: string
      required:
      - _1
      - _2
      type: object
    PackageInfo:
      properties:
        packageVersion:
          type: string
        packageName:
          type: string
        checksum:
          type: string
      required:
      - packageName
      - packageVersion
      - checksum
      type: object
    RangeNotSatisfiableRepr:
      properties:
        description:
          type: string
        msg:
          type: string
        errorId:
          format: uuid
          type: string
        cause:
          type: string
        code:
          type: string
      required:
      - msg
      - code
      type: object
    None:
      type: object
    PaginationResult_DevicePackages:
      properties:
        offset:
          format: int64
          type: integer
        values:
          items:
            $ref: '#/components/schemas/DevicePackages'
          type: array
        limit:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - total
      - offset
      - limit
      type: object
    PaginationResult_String:
      properties:
        offset:
          format: int64
          type: integer
        values:
          items:
            type: string
          type: array
        limit:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - total
      - offset
      - limit
      type: object
    DevicePackage:
      properties:
        version:
          type: string
        checksum:
          type: string
        component:
          type: string
        name:
          type: string
      required:
      - component
      - name
      - version
      - checksum
      type: object
    Image:
      properties:
        filepath:
          type: string
        fileinfo:
          $ref: '#/components/schemas/FileInfo'
      required:
      - filepath
      - fileinfo
      type: object
    EditPackage:
      properties:
        comment:
          type: string
        proprietaryMeta:
          type: string
        uri:
          format: uri
          type: string
        hardwareIds:
          items:
            type: string
          type: array
      type: object
    CreateLockboxRequest:
      properties:
        custom:
          $ref: '#/components/schemas/Map_PackageId_CustomUpdateData'
        expiresAt:
          format: date-time
          type: string
        packageIds:
          items:
            type: string
          type: array
      type: object
    DevicePackages:
      properties:
        deviceUuid:
          format: uuid
          type: string
        installedPackages:
          items:
            $ref: '#/components/schemas/InstalledPackage'
          type: array
      required:
      - deviceUuid
      type: object
    InstalledPackage:
      properties:
        installed:
          $ref: '#/components/schemas/PackageInfo'
        component:
          type: string
      required:
      - component
      - installed
      type: object
    Package:
      properties:
        pkgType:
          type: string
        uri:
          format: uri
          type: string
        createdAt:
          format: date-time
          type: string
        hardwareIds:
          items:
            type: string
          type: array
        name:
          type: string
        version:
          type: string
        size:
          format: int64
          type: integer
        comment:
          type: string
        hashes:
          $ref: '#/components/schemas/Map_Value_Refined_String_ValidChecksum'
        proprietaryMeta:
          type: string
        packageId:
          type: string
      required:
      - name
      - version
      - packageId
      - size
      - hashes
      type: object
    DeviceStatus:
      enum:
      - NotSeen
      - Error
      - UpToDate
      - UpdatePending
      - OutDated
      type: string
    TargetImage:
      properties:
        createdAt:
          format: date-time
          type: string
        uri:
          format: uri
          type: string
        image:
          $ref: '#/components/schemas/Image'
      required:
      - image
      - createdAt
      type: object
    TimeAggregation:
      properties:
        bucket:
          type: string
        method:
          $ref: '#/components/schemas/TimeAggregationMethod'
      required:
      - bucket
      - method
      type: object
    Map_PackageId_CustomUpdateData:
      additionalProperties:
        $ref: '#/components/schemas/CustomUpdateData'
      type: object
    CreateFleet:
      properties:
        expression:
          type: string
        fleetType:
          $ref: '#/components/schemas/FleetType'
        name:
          type: string
      required:
      - name
      - fleetType
      type: object
    Count:
      type: object
    Min:
      type: object
    FleetType:
      enum:
      - static
      - dynamic
      type: string
    DeviceSort:
      enum:
      - Name
      - DeviceId
      - Uuid
      - CreatedAt
      - ActivatedAt
      - LastSeen
      type: string
    PaginationResult_Package:
      properties:
        offset:
          format: int64
          type: integer
        values:
          items:
            $ref: '#/components/schemas/Package'
          type: array
        limit:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - total
      - offset
      - limit
      type: object
    ClientSignature:
      properties:
        keyid:
          type: string
        sig:
          type: string
        method:
          $ref: '#/components/schemas/SignatureMethod'
      required:
      - keyid
      - method
      - sig
      type: object
    PaginationResult_DeviceInfoBasic:
      properties:
        offset:
          format: int64
          type: integer
        values:
          items:
            $ref: '#/components/schemas/DeviceInfoBasic'
          type: array
        limit:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - total
      - offset
      - limit
      type: object
    CustomUpdateData:
      properties:
        uri:
          format: uri
          type: string
        metadata:
          type: string
      type: object
    DeviceSortDirection:
      enum:
      - Asc
      - Desc
      type: string
    Max:
      type: object
    SimpleDeviceNotAffectedInfo:
      properties:
        deviceUuid:
          format: uuid
          type: string
        name:
          type: string
        ecuErrors:
          $ref: '#/components/schemas/Map_EcuIdentifier_ErrorRepresentation'
        deviceId:
          type: string
      required:
      - deviceUuid
      - deviceId
      - name
      - ecuErrors
      type: object
    Map_EcuIdentifier_ErrorRepresentation:
      additionalProperties:
        $ref: '#/components/schemas/ErrorRepresentation'
      type: object
    SeriesMeta:
      properties:
        deviceIds:
          items:
            format: uuid
            type: string
          type: array
        aggregation:
          $ref: '#/components/schemas/TimeAggregation'
      required:
      - aggregation
      type: object
    Tuple2_Long_Option_Double:
      properties:
        _2:
          format: double
          type: number
        _1:
          format: int64
          type: integer
      required:
      - _1
      type: object
    MetricsResponse:
      properties:
        series:
          items:
            $ref: '#/components/schemas/Series'
          type: array
      type: object
    NotFoundRepr:
      properties:
        description:
          type: string
        msg:
          type: string
        errorId:
          format: uuid
          type: string
        cause:
          type: string
        code:
          type: string
      required:
      - msg
      - code
      type: object
    ProvisionInfo:
      properties:
        standardDeviceLimit:
          format: int32
          type: integer
        autoProvUrl:
          format: uri
          type: string
        token:
          type: string
        provisionedDevices:
          format: int32
          type: integer
        gatewayUrl:
          format: uri
          type: string
      required:
      - token
      - autoProvUrl
      - gatewayUrl
      - provisionedDevices
      - standardDeviceLimit
      type: object
    QueueResponse:
      properties:
        inFlight:
          type: boolean
        targets:
          $ref: '#/components/schemas/Map_EcuIdentifier_TargetImage'
        correlationId:
          type: string
      required:
      - correlationId
      - targets
      - inFlight
      type: object
    DelegationInfo:
      properties:
        remoteUri:
          format: uri
          type: string
        friendlyName:
          type: string
        lastFetched:
          format: date-time
          type: string
      type: object
    SignatureMethod:
      enum:
      - rsassa-pss-sha256
      - ed25519
      - ecPrime256v1
      type: string
    ConflictRepr:
      properties:
        description:
          type: string
        msg:
          type: string
        errorId:
          format: uuid
          type: string
        cause:
          type: string
        code:
          type: string
      required:
      - msg
      - code
      type: object
    Average:
      type: object
    SimpleDeviceInfo:
      properties:
        deviceUuid:
          format: uuid
          type: string
        name:
          type: string
        deviceId:
          type: string
      required:
      - deviceUuid
      - deviceId
      - name
      type: object
    DeviceInfoExtended:
      properties:
        deviceTags:
          items:
            $ref: '#/components/schemas/Tuple2_DeviceTagId_DeviceTagValue'
          type: array
        devicePackages:
          items:
            $ref: '#/components/schemas/DevicePackage'
          type: array
        deviceFleets:
          items:
            $ref: '#/components/schemas/Fleet'
          type: array
        notes:
          type: string
        createdAt:
          format: date-time
          type: string
        lastSeen:
          format: date-time
          type: string
        deviceId:
          type: string
        lastUpdated:
          format: date-time
          type: string
        deviceUuid:
          format: uuid
          type: string
        networkInfo:
          $ref: '#/components/schemas/NetworkInfo'
        deviceStatus:
          $ref: '#/components/schemas/DeviceStatus'
        activatedAt:
          format: date-time
          type: string
        deviceName:
          type: string
      required:
      - deviceUuid
      - deviceName
      - deviceId
      - createdAt
      - deviceStatus
      - networkInfo
      type: object
    ExternalPackage:
      properties:
        pkgType:
          type: string
        uri:
          format: uri
          type: string
        createdAt:
          format: date-time
          type: string
        hardwareIds:
          items:
            type: string
          type: array
        delegationOrigin:
          type: string
        name:
          type: string
        version:
          type: string
        size:
          format: int64
          type: integer
        hashes:
          $ref: '#/components/schemas/Map_Value_Refined_String_ValidChecksum'
        proprietaryMeta:
          type: string
        packageId:
          type: string
      required:
      - name
      - delegationOrigin
      - version
      - packageId
      - size
      - hashes
      type: object
    DeviceInfoBasic:
      pattern: ^[A-Z].*
      properties:
        lastSeen:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        deviceStatus:
          $ref: '#/components/schemas/DeviceStatus'
        notes:
          type: string
        deviceUuid:
          format: uuid
          type: string
        deviceId:
          type: string
        deviceName:
          type: string
        activatedAt:
          format: date-time
          type: string
      required:
      - deviceUuid
      - deviceName
      - deviceId
      - createdAt
      - deviceStatus
      type: object
    PaginationResult_ExternalPackage:
      properties:
        offset:
          format: int64
          type: integer
        values:
          items:
            $ref: '#/components/schemas/ExternalPackage'
          type: array
        limit:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - total
      - offset
      - limit
      type: object
    UpstreamEndpointErrorRepr:
      properties:
        description:
          type: string
        msg:
          type: string
        errorId:
          format: uuid
          type: string
        cause:
          type: string
        code:
          type: string
      required:
      - msg
      - code
      type: object
    Last:
      type: object
    JsonSignedPayload:
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/ClientSignature'
          type: array
        signed: {}
      required:
      - signed
      type: object
    EcuInfoResponse:
      properties:
        hardwareId:
          type: string
        primary:
          type: boolean
        id:
          type: string
        image:
          $ref: '#/components/schemas/EcuInfoImage'
      required:
      - id
      - hardwareId
      - primary
      - image
      type: object
    ErrorRepresentation:
      properties:
        description:
          type: string
        cause:
          type: string
        code:
          type: string
        errorId:
          format: uuid
          type: string
      required:
      - code
      - description
      type: object
    Map_Value_Refined_String_ValidChecksum:
      additionalProperties:
        type: string
      type: object
    FileInfo:
      properties:
        hashes:
          format: checksum
          type: string
        length:
          format: int64
          type: integer
      required:
      - hashes
      - length
      type: object
    EcuInfoImage:
      properties:
        size:
          format: int64
          type: integer
        filepath:
          type: string
        hash:
          format: checksum
          type: string
      required:
      - filepath
      - size
      - hash
      type: object
    Fleet:
      pattern: ^[A-Z].*
      properties:
        fleetType:
          $ref: '#/components/schemas/FleetType'
        createdAt:
          format: date-time
          type: string
        name:
          type: string
        expression:
          type: string
        id:
          format: uuid
          type: string
      required:
      - id
      - name
      - createdAt
      - fleetType
      type: object
    BadRequestRepr:
      properties:
        description:
          type: string
        msg:
          type: string
        errorId:
          format: uuid
          type: string
        cause:
          type: string
        code:
          type: string
      required:
      - msg
      - code
      type: object
    UpdateCreateResult:
      properties:
        notAffected:
          items:
            $ref: '#/components/schemas/SimpleDeviceNotAffectedInfo'
          type: array
        affected:
          items:
            $ref: '#/components/schemas/SimpleDeviceInfo'
          type: array
      type: object
    UpdateRequest:
      properties:
        custom:
          $ref: '#/components/schemas/Map_PackageId_CustomUpdateData'
        fleets:
          items:
            format: uuid
            type: string
          type: array
        devices:
          items:
            format: uuid
            type: string
          type: array
        packageIds:
          items:
            type: string
          type: array
      type: object
    Map_DelegatedRoleName_DelegationInfo:
      additionalProperties:
        $ref: '#/components/schemas/DelegationInfo'
      type: object
    DeviceCreateReq:
      properties:
        deviceName:
          type: string
        deviceId:
          type: string
      required:
      - deviceId
      type: object
    PaginationResult_Fleet:
      properties:
        offset:
          format: int64
          type: integer
        values:
          items:
            $ref: '#/components/schemas/Fleet'
          type: array
        limit:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - total
      - offset
      - limit
      type: object
    Map_LockboxName_JsonSignedPayload:
      additionalProperties:
        $ref: '#/components/schemas/JsonSignedPayload'
      type: object
    PaginationResult_NetworkInfo:
      properties:
        offset:
          format: int64
          type: integer
        values:
          items:
            $ref: '#/components/schemas/NetworkInfo'
          type: array
        limit:
          format: int64
          type: integer
        total:
          format: int64
          type: integer
      required:
      - total
      - offset
      - limit
      type: object
    Series:
      properties:
        points:
          items:
            $ref: '#/components/schemas/Tuple2_Long_Option_Double'
          type: array
        meta:
          $ref: '#/components/schemas/SeriesMeta'
        name:
          type: string
      required:
      - name
      - meta
      type: object
    NetworkInfo:
      properties:
        hostname:
          type: string
        deviceUuid:
          format: uuid
          type: string
        macAddress:
          type: string
        localIpV4:
          type: string
      required:
      - deviceUuid
      type: object
    Map_EcuIdentifier_TargetImage:
      additionalProperties:
        $ref: '#/components/schemas/TargetImage'
      type: object
    TimeAggregationMethod:
      oneOf:
      - $ref: '#/components/schemas/Average'
      - $ref: '#/components/schemas/Count'
      - $ref: '#/components/schemas/Last'
      - $ref: '#/components/schemas/Max'
      - $ref: '#/components/schemas/Min'
      - $ref: '#/components/schemas/None'
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
security:
- BearerAuth: []
servers:
- description: Torizon Platform API
  url: https://app.torizon.io/api/v2beta

